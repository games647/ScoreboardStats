package com.github.games647.scoreboardstats.listener;import com.github.games647.scoreboardstats.pvpstats.Database;import com.github.games647.scoreboardstats.pvpstats.PlayerCache;import com.github.games647.scoreboardstats.pvpstats.SaveTask;import com.github.games647.variables.Other;import org.bukkit.Bukkit;import org.bukkit.entity.Player;import org.bukkit.event.EventHandler;import static com.github.games647.scoreboardstats.ScoreboardStats.getInstance;import static com.github.games647.scoreboardstats.ScoreboardStats.getSettings;public final class PlayerListener implements org.bukkit.event.Listener {	@EventHandler	public static void onDeath(final org.bukkit.event.entity.PlayerDeathEvent death) {		final Player killed = death.getEntity();		final PlayerCache killedcache = Database.getCache(killed.getName());		final Player killer = killed.getKiller();		if (!getSettings().isPvpStats()				|| getSettings().checkWorld(killed.getWorld().getName())) {			return;		}		if (killedcache != null) {			killedcache.onDeath();		}		if (killer != null				&& killer.isOnline()) {			final PlayerCache killercache = Database.getCache(killer.getName());			if (getSettings().isSound()) {				killer.playSound(killer.getLocation(), org.bukkit.Sound.ORB_PICKUP, Other.VOLUME, Other.PITCH);			}			if (killercache != null) {				killercache.onKill();			}		}	}	@EventHandler	public static void onJoin(final org.bukkit.event.player.PlayerJoinEvent join) {		final Player player = join.getPlayer();		Bukkit.getScheduler().runTaskAsynchronously(getInstance(), new Runnable() {			@Override			public void run() {				if (getSettings().isPvpStats()) {					Database.loadAccount(player.getName());				}			}		});	}	@EventHandler(ignoreCancelled = true)	public static void onChange(final org.bukkit.event.player.PlayerChangedWorldEvent teleport) {		final Player player = teleport.getPlayer();		if (getSettings().checkWorld(player.getWorld().getName())) {			player.getScoreboard().clearSlot(org.bukkit.scoreboard.DisplaySlot.SIDEBAR);		}	}	@EventHandler	public static void onKick(final org.bukkit.event.player.PlayerKickEvent kick) {		if (getSettings().isPvpStats()) {			Bukkit.getScheduler().runTaskLaterAsynchronously(getInstance(), new SaveTask(kick.getPlayer()), Other.DELAYED_SAVE);		}	}	@EventHandler	public static void onQuit(final org.bukkit.event.player.PlayerQuitEvent quit) {		if (getSettings().isPvpStats()) {			Bukkit.getScheduler().runTaskLaterAsynchronously(getInstance(), new SaveTask(quit.getPlayer()), Other.DELAYED_SAVE);		}	}}